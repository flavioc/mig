/*
   Copyright (C) 2016 Free Software Foundation, Inc.

   This file is part of GNU MIG.

   GNU MIG is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2, or (at
   your option) any later version.

   GNU MIG is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GNU MIG.  If not, see <http://www.gnu.org/licenses/>.  */

subsystem structs 0;

import <mach/time_value.h>;
import <mach/thread_info.h>;
#include "../base_types.defs"

typedef int integer_t;
typedef unsigned int natural_t;
typedef natural_t mach_port_seqno_t;
struct time_value {
	integer_t	seconds;
	integer_t	microseconds;
};
typedef	struct time_value time_value_t;

typedef struct mach_port_status {
   mach_port_t		mps_pset;	/* containing port set */
   mach_port_seqno_t	mps_seqno;	/* sequence number */
   natural_t mps_mscount;	/* make-send count */
   natural_t mps_qlimit;	/* queue limit */
   natural_t mps_msgcount;	/* number in the queue */
   natural_t mps_sorights;	/* how many send-once rights */
   natural_t mps_srights;	/* do send rights exist? */
   natural_t mps_pdrequest;	/* port-deleted requested? */
   natural_t mps_nsrequest;	/* no-senders requested? */
} mach_port_status_t;

typedef struct thread_basic_info {
	time_value_t	user_time;	/* user run time */
	time_value_t	system_time;	/* system run time */
	integer_t	cpu_usage;	/* scaled cpu usage percentage */
	integer_t	base_priority;	/* base scheduling priority */
	integer_t	cur_priority;	/* current scheduling priority */
	integer_t	run_state;	/* run state (see below) */
	integer_t	flags;		/* various flags (see below) */
	integer_t	suspend_count;	/* suspend count for thread */
	integer_t	sleep_time;	/* number of seconds that thread
					   has been sleeping */
	time_value_t	creation_time;	/* time stamp of creation */
} thread_basic_info_t;

routine usestruct(port : mach_port_t; str : mach_port_status_t;
				  time : time_value_t;
				  thread : thread_basic_info_t;
				  out result : mach_port_status_t);
